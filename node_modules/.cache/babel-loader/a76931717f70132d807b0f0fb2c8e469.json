{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kelson.almeida\\\\Desktop\\\\bbbb\\\\src\\\\CheckoutForm.jsx\";\n// import React, { useEffect, useState } from \"react\";\n// import {\n//   PaymentElement,\n//   useStripe,\n//   useElements,\n//   AddressElement\n// } from \"@stripe/react-stripe-js\";\n\n// export default function CheckoutForm() {\n//   const stripe = useStripe();\n//   const elements = useElements();\n\n//   const [email, setEmail] = useState('');\n\n//   const [message, setMessage] = useState(null);\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   useEffect(() => {\n//     if (!stripe) {\n//       return;\n//     }\n\n//     const clientSecret = new URLSearchParams(window.location.search).get(\n//       \"payment_intent_client_secret\"\n//     );\n\n//     if (!clientSecret) {\n//       return;\n//     }\n\n//     stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\n//       switch (paymentIntent.status) {\n//         case \"succeeded\":\n//           setMessage(\"Pagamento realizado com sucesso!\");\n//           break;\n//         case \"processing\":\n//           setMessage(\"Seu pagamento está sendo processado.\");\n//           break;\n//         case \"requires_payment_method\":\n//           setMessage(\"Seu pagamento não foi bem-sucedido, tente novamente.\");\n//           break;\n//         default:\n//           setMessage(\"Algo deu errado.\");\n//           break;\n//       }\n//     });\n//   }, [stripe]);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (!stripe || !elements) {\n//       // Stripe.js hasn't yet loaded.\n//       // Make sure to disable form submission until Stripe.js has loaded.\n//       return;\n//     }\n\n//     setIsLoading(true);\n\n//     const { error } = await stripe.confirmPayment({\n//       elements,\n//       confirmParams: {\n//         // Make sure to change this to your payment completion page\n//         return_url: \"http://google.com\",\n//         receipt_email: email,\n//       },\n//     });\n\n//     // This point will only be reached if there is an immediate error when\n//     // confirming the payment. Otherwise, your customer will be redirected to\n//     // your `return_url`. For some payment methods like iDEAL, your customer will\n//     // be redirected to an intermediate site first to authorize the payment, then\n//     // redirected to the `return_url`.\n//     if (error.type === \"card_error\" || error.type === \"validation_error\") {\n//       setMessage(error.message);\n//     } else {\n//       setMessage(\"An unexpected error occurred.\");\n//     }\n\n//     setIsLoading(false);\n//   };\n\n//   const paymentElementOptions = {\n//     layout: \"tabs\"\n//   }\n\n//   return (\n//     <form id=\"payment-form\" onSubmit={handleSubmit}>\n//       <input\n//         id=\"email\"\n//         type=\"text\"\n//         value={email}\n//         onChange={(e) => setEmail(e.target.value)}\n//         placeholder=\"Insira seu email\"\n//       />\n\n//         <AddressElement options={{\n//           mode: 'shipping',\n//           allowedCountries: ['BR'],\n//           fields: {\n//             phone: 'always',\n//           },\n//           validation: {\n//             phone: {\n//               required: 'never',\n//             },\n//           },\n\n//         }} />\n\n//       <PaymentElement id=\"payment-element\" options={paymentElementOptions} />\n//       <button disabled={isLoading || !stripe || !elements} id=\"submit\">\n//         <span id=\"button-text\">\n//           {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pague agora\"}\n//         </span>\n//       </button>\n//       {/* Show any error or success messages */}\n//         {message && <div id=\"payment-message\">{alert(\"Pagamento realizado com sucesso!\")}</div>}\n//     </form>\n//   );\n// }\n\nimport React, { useEffect, useState } from \"react\";\nimport { PaymentElement, useStripe, useElements, AddressElement } from \"@stripe/react-stripe-js\";\nexport default function CheckoutForm() {\n  const stripe = useStripe();\n  const elements = useElements();\n  const [email, setEmail] = useState('');\n  const [cpfCnpj, setCpfCnpj] = useState('');\n  const [items, setItems] = useState([{\n    id: \"item1\",\n    price: 1000\n  }, {\n    id: \"item2\",\n    price: 1500\n  }]);\n  const [message, setMessage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [clientSecret, setClientSecret] = useState('');\n  useEffect(() => {\n    // Create PaymentIntent when the component mounts\n    fetch(\"/create-payment-intent\", {\n      method: \"POST\",\n      headers: {\n        \"Content-Type\": \"application/json\"\n      },\n      body: JSON.stringify({\n        items\n      })\n    }).then(res => res.json()).then(data => setClientSecret(data.clientSecret));\n  }, [items]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!stripe || !elements) {\n      return;\n    }\n    setIsLoading(true);\n    const {\n      error\n    } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        return_url: \"http://localhost:3000/\",\n        receipt_email: email\n      },\n      payment_method_data: {\n        billing_details: {\n          email: email,\n          phone: cpfCnpj\n        }\n      }\n    });\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\n      setMessage(error.message);\n    } else {\n      setMessage(\"An unexpected error occurred.\");\n    }\n    setIsLoading(false);\n  };\n  const paymentElementOptions = {\n    layout: \"tabs\"\n  };\n  return /*#__PURE__*/React.createElement(\"form\", {\n    id: \"payment-form\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 191,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    id: \"email\",\n    type: \"text\",\n    value: email,\n    onChange: e => setEmail(e.target.value),\n    placeholder: \"Enter email address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 192,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"cpfCnpj\",\n    type: \"text\",\n    value: cpfCnpj,\n    onChange: e => setCpfCnpj(e.target.value),\n    placeholder: \"Enter CPF or CNPJ\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 199,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(AddressElement, {\n    options: {\n      mode: 'shipping',\n      allowedCountries: ['BR'],\n      fields: {\n        phone: 'always'\n      },\n      validation: {\n        phone: {\n          required: 'never'\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 207,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PaymentElement, {\n    id: \"payment-element\",\n    options: paymentElementOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: isLoading || !stripe || !elements,\n    id: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    id: \"button-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 222,\n      columnNumber: 9\n    }\n  }, isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spinner\",\n    id: \"spinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 223,\n      columnNumber: 24\n    }\n  }) : \"Pay now\")), message && /*#__PURE__*/React.createElement(\"div\", {\n    id: \"payment-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 226,\n      columnNumber: 19\n    }\n  }, message));\n}","map":{"version":3,"names":["React","useEffect","useState","PaymentElement","useStripe","useElements","AddressElement","CheckoutForm","stripe","elements","email","setEmail","cpfCnpj","setCpfCnpj","items","setItems","id","price","message","setMessage","isLoading","setIsLoading","clientSecret","setClientSecret","fetch","method","headers","body","JSON","stringify","then","res","json","data","handleSubmit","e","preventDefault","error","confirmPayment","confirmParams","return_url","receipt_email","payment_method_data","billing_details","phone","type","paymentElementOptions","layout","createElement","onSubmit","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","target","placeholder","options","mode","allowedCountries","fields","validation","required","disabled","className"],"sources":["C:/Users/kelson.almeida/Desktop/bbbb/src/CheckoutForm.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import {\n//   PaymentElement,\n//   useStripe,\n//   useElements,\n//   AddressElement\n// } from \"@stripe/react-stripe-js\";\n\n// export default function CheckoutForm() {\n//   const stripe = useStripe();\n//   const elements = useElements();\n\n//   const [email, setEmail] = useState('');\n\n//   const [message, setMessage] = useState(null);\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   useEffect(() => {\n//     if (!stripe) {\n//       return;\n//     }\n\n//     const clientSecret = new URLSearchParams(window.location.search).get(\n//       \"payment_intent_client_secret\"\n//     );\n\n//     if (!clientSecret) {\n//       return;\n//     }\n\n//     stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\n//       switch (paymentIntent.status) {\n//         case \"succeeded\":\n//           setMessage(\"Pagamento realizado com sucesso!\");\n//           break;\n//         case \"processing\":\n//           setMessage(\"Seu pagamento está sendo processado.\");\n//           break;\n//         case \"requires_payment_method\":\n//           setMessage(\"Seu pagamento não foi bem-sucedido, tente novamente.\");\n//           break;\n//         default:\n//           setMessage(\"Algo deu errado.\");\n//           break;\n//       }\n//     });\n//   }, [stripe]);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (!stripe || !elements) {\n//       // Stripe.js hasn't yet loaded.\n//       // Make sure to disable form submission until Stripe.js has loaded.\n//       return;\n//     }\n\n//     setIsLoading(true);\n\n//     const { error } = await stripe.confirmPayment({\n//       elements,\n//       confirmParams: {\n//         // Make sure to change this to your payment completion page\n//         return_url: \"http://google.com\",\n//         receipt_email: email,\n//       },\n//     });\n\n//     // This point will only be reached if there is an immediate error when\n//     // confirming the payment. Otherwise, your customer will be redirected to\n//     // your `return_url`. For some payment methods like iDEAL, your customer will\n//     // be redirected to an intermediate site first to authorize the payment, then\n//     // redirected to the `return_url`.\n//     if (error.type === \"card_error\" || error.type === \"validation_error\") {\n//       setMessage(error.message);\n//     } else {\n//       setMessage(\"An unexpected error occurred.\");\n//     }\n\n//     setIsLoading(false);\n//   };\n\n//   const paymentElementOptions = {\n//     layout: \"tabs\"\n//   }\n\n//   return (\n//     <form id=\"payment-form\" onSubmit={handleSubmit}>\n//       <input\n//         id=\"email\"\n//         type=\"text\"\n//         value={email}\n//         onChange={(e) => setEmail(e.target.value)}\n//         placeholder=\"Insira seu email\"\n//       />\n\n//         <AddressElement options={{\n//           mode: 'shipping',\n//           allowedCountries: ['BR'],\n//           fields: {\n//             phone: 'always',\n//           },\n//           validation: {\n//             phone: {\n//               required: 'never',\n//             },\n//           },\n\n//         }} />\n\n//       <PaymentElement id=\"payment-element\" options={paymentElementOptions} />\n//       <button disabled={isLoading || !stripe || !elements} id=\"submit\">\n//         <span id=\"button-text\">\n//           {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pague agora\"}\n//         </span>\n//       </button>\n//       {/* Show any error or success messages */}\n//         {message && <div id=\"payment-message\">{alert(\"Pagamento realizado com sucesso!\")}</div>}\n//     </form>\n//   );\n// }\n\n\nimport React, { useEffect, useState } from \"react\";\nimport {\n  PaymentElement,\n  useStripe,\n  useElements,\n  AddressElement\n} from \"@stripe/react-stripe-js\";\n\nexport default function CheckoutForm() {\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const [email, setEmail] = useState('');\n  const [cpfCnpj, setCpfCnpj] = useState('');\n  const [items, setItems] = useState([{ id: \"item1\", price: 1000 }, { id: \"item2\", price: 1500 }]);\n  const [message, setMessage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  const [clientSecret, setClientSecret] = useState('');\n\n  useEffect(() => {\n    // Create PaymentIntent when the component mounts\n    fetch(\"/create-payment-intent\", {\n      method: \"POST\",\n      headers: { \"Content-Type\": \"application/json\" },\n      body: JSON.stringify({ items }),\n    })\n    .then(res => res.json())\n    .then(data => setClientSecret(data.clientSecret));\n  }, [items]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    const { error } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        return_url: \"http://localhost:3000/\",\n        receipt_email: email,\n      },\n      payment_method_data: {\n        billing_details: {\n          email: email,\n          phone: cpfCnpj,\n        },\n      },\n    });\n\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\n      setMessage(error.message);\n    } else {\n      setMessage(\"An unexpected error occurred.\");\n    }\n\n    setIsLoading(false);\n  };\n\n  const paymentElementOptions = {\n    layout: \"tabs\"\n  }\n\n  return (\n    <form id=\"payment-form\" onSubmit={handleSubmit}>\n      <input\n        id=\"email\"\n        type=\"text\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n        placeholder=\"Enter email address\"\n      />\n      <input\n        id=\"cpfCnpj\"\n        type=\"text\"\n        value={cpfCnpj}\n        onChange={(e) => setCpfCnpj(e.target.value)}\n        placeholder=\"Enter CPF or CNPJ\"\n      />\n      \n      <AddressElement options={{\n        mode: 'shipping',\n        allowedCountries: ['BR'],\n        fields: {\n          phone: 'always',\n        },\n        validation: {\n          phone: {\n            required: 'never',\n          },\n        },\n      }} />\n\n      <PaymentElement id=\"payment-element\" options={paymentElementOptions} />\n      <button disabled={isLoading || !stripe || !elements} id=\"submit\">\n        <span id=\"button-text\">\n          {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pay now\"}\n        </span>\n      </button>\n      {message && <div id=\"payment-message\">{message}</div>}\n    </form>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}