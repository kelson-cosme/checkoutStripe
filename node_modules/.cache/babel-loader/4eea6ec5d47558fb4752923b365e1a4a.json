{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kelson.almeida\\\\Desktop\\\\bbbb\\\\src\\\\CheckoutForm.jsx\";\n// import React, { useEffect, useState } from \"react\";\n// import {\n//   PaymentElement,\n//   useStripe,\n//   useElements,\n//   AddressElement\n// } from \"@stripe/react-stripe-js\";\n\n// export default function CheckoutForm() {\n//   const stripe = useStripe();\n//   const elements = useElements();\n\n//   const [email, setEmail] = useState('');\n\n//   const [message, setMessage] = useState(null);\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   useEffect(() => {\n//     if (!stripe) {\n//       return;\n//     }\n\n//     const clientSecret = new URLSearchParams(window.location.search).get(\n//       \"payment_intent_client_secret\"\n//     );\n\n//     if (!clientSecret) {\n//       return;\n//     }\n\n//     stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\n//       switch (paymentIntent.status) {\n//         case \"succeeded\":\n//           setMessage(\"Payment succeeded!\");\n//           break;\n//         case \"processing\":\n//           setMessage(\"Your payment is processing.\");\n//           break;\n//         case \"requires_payment_method\":\n//           setMessage(\"Your payment was not successful, please try again.\");\n//           break;\n//         default:\n//           setMessage(\"Something went wrong.\");\n//           break;\n//       }\n//     });\n//   }, [stripe]);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (!stripe || !elements) {\n//       // Stripe.js hasn't yet loaded.\n//       // Make sure to disable form submission until Stripe.js has loaded.\n//       return;\n//     }\n\n//     setIsLoading(true);\n\n//     const { error } = await stripe.confirmPayment({\n//       elements,\n//       confirmParams: {\n//         // Make sure to change this to your payment completion page\n//         return_url: \"http://localhost:3000/\",\n//         receipt_email: email,\n//       },\n//     });\n\n//     // This point will only be reached if there is an immediate error when\n//     // confirming the payment. Otherwise, your customer will be redirected to\n//     // your `return_url`. For some payment methods like iDEAL, your customer will\n//     // be redirected to an intermediate site first to authorize the payment, then\n//     // redirected to the `return_url`.\n//     if (error.type === \"card_error\" || error.type === \"validation_error\") {\n//       setMessage(error.message);\n//     } else {\n//       setMessage(\"An unexpected error occurred.\");\n//     }\n\n//     setIsLoading(false);\n//   };\n\n//   const paymentElementOptions = {\n//     layout: \"tabs\"\n//   }\n\n//   return (\n//     <form id=\"payment-form\" onSubmit={handleSubmit}>\n//       <input\n//         id=\"email\"\n//         type=\"text\"\n//         value={email}\n//         onChange={(e) => setEmail(e.target.value)}\n//         placeholder=\"Enter email address\"\n//       />\n\n//         <AddressElement options={{\n//           mode: 'shipping',\n//           allowedCountries: ['BR'],\n//           fields: {\n//             phone: 'always',\n//           },\n//           validation: {\n//             phone: {\n//               required: 'never',\n//             },\n//           },\n\n//         }} />\n\n//       <PaymentElement id=\"payment-element\" options={paymentElementOptions} />\n//       <button disabled={isLoading || !stripe || !elements} id=\"submit\">\n//         <span id=\"button-text\">\n//           {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pay now\"}\n//         </span>\n//       </button>\n//       {/* Show any error or success messages */}\n//       {message && <div id=\"payment-message\">{message}</div>}\n//     </form>\n//   );\n// }\n\nimport React, { useEffect, useState } from \"react\";\nimport { PaymentElement, useStripe, useElements, AddressElement } from \"@stripe/react-stripe-js\";\nexport default function CheckoutForm() {\n  const stripe = useStripe();\n  const elements = useElements();\n  const [email, setEmail] = useState('');\n  const [cpfCnpj, setCpfCnpj] = useState('');\n  const [message, setMessage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    if (!stripe) {\n      return;\n    }\n    const clientSecret = new URLSearchParams(window.location.search).get(\"payment_intent_client_secret\");\n    if (!clientSecret) {\n      return;\n    }\n    stripe.retrievePaymentIntent(clientSecret).then(({\n      paymentIntent\n    }) => {\n      switch (paymentIntent.status) {\n        case \"succeeded\":\n          alert(\"Pagamento realizado com sucesso!\");\n          break;\n        case \"processing\":\n          setMessage(\"Seu pagamento está sendo processado\");\n          break;\n        case \"requires_payment_method\":\n          setMessage(\"Seu pagamento não foi bem-sucedido, tente novamente.\");\n          break;\n        default:\n          setMessage(\"Algo deu errado.\");\n          break;\n      }\n    });\n  }, [stripe]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!stripe || !elements) {\n      // Stripe.js hasn't yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n    setIsLoading(true);\n    const {\n      error\n    } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        // Make sure to change this to your payment completion page\n        return_url: \"http://localhost:3000/\",\n        receipt_email: email\n      },\n      payment_method_data: {\n        billing_details: {\n          email: email,\n          phone: cpfCnpj\n        }\n      }\n    });\n\n    // This point will only be reached if there is an immediate error when\n    // confirming the payment. Otherwise, your customer will be redirected to\n    // your `return_url`. For some payment methods like iDEAL, your customer will\n    // be redirected to an intermediate site first to authorize the payment, then\n    // redirected to the `return_url`.\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\n      setMessage(error.message);\n    } else {\n      setMessage(\"An unexpected error occurred.\");\n    }\n    setIsLoading(false);\n  };\n  const paymentElementOptions = {\n    layout: \"tabs\"\n  };\n  return /*#__PURE__*/React.createElement(\"form\", {\n    id: \"payment-form\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    id: \"email\",\n    type: \"text\",\n    value: email,\n    onChange: e => setEmail(e.target.value),\n    placeholder: \"Adicione seu e-mail\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 221,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"cpfCnpj\",\n    type: \"text\",\n    value: cpfCnpj,\n    onChange: e => setCpfCnpj(e.target.value),\n    placeholder: \"Enter CPF or CNPJ\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 228,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(AddressElement, {\n    options: {\n      mode: 'shipping',\n      allowedCountries: ['BR'],\n      fields: {\n        phone: 'always'\n      },\n      validation: {\n        phone: {\n          required: 'never'\n        }\n      }\n    },\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 236,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PaymentElement, {\n    id: \"payment-element\",\n    options: paymentElementOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 249,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: isLoading || !stripe || !elements,\n    id: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 250,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    id: \"button-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 251,\n      columnNumber: 9\n    }\n  }, isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spinner\",\n    id: \"spinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 252,\n      columnNumber: 24\n    }\n  }) : \"Pague agora\")), message && /*#__PURE__*/React.createElement(\"div\", {\n    id: \"payment-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 19\n    }\n  }, message));\n}","map":{"version":3,"names":["React","useEffect","useState","PaymentElement","useStripe","useElements","AddressElement","CheckoutForm","stripe","elements","email","setEmail","cpfCnpj","setCpfCnpj","message","setMessage","isLoading","setIsLoading","clientSecret","URLSearchParams","window","location","search","get","retrievePaymentIntent","then","paymentIntent","status","alert","handleSubmit","e","preventDefault","error","confirmPayment","confirmParams","return_url","receipt_email","payment_method_data","billing_details","phone","type","paymentElementOptions","layout","createElement","id","onSubmit","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","target","placeholder","options","mode","allowedCountries","fields","validation","required","disabled","className"],"sources":["C:/Users/kelson.almeida/Desktop/bbbb/src/CheckoutForm.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import {\n//   PaymentElement,\n//   useStripe,\n//   useElements,\n//   AddressElement\n// } from \"@stripe/react-stripe-js\";\n\n// export default function CheckoutForm() {\n//   const stripe = useStripe();\n//   const elements = useElements();\n\n//   const [email, setEmail] = useState('');\n\n//   const [message, setMessage] = useState(null);\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   useEffect(() => {\n//     if (!stripe) {\n//       return;\n//     }\n\n//     const clientSecret = new URLSearchParams(window.location.search).get(\n//       \"payment_intent_client_secret\"\n//     );\n\n//     if (!clientSecret) {\n//       return;\n//     }\n\n//     stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\n//       switch (paymentIntent.status) {\n//         case \"succeeded\":\n//           setMessage(\"Payment succeeded!\");\n//           break;\n//         case \"processing\":\n//           setMessage(\"Your payment is processing.\");\n//           break;\n//         case \"requires_payment_method\":\n//           setMessage(\"Your payment was not successful, please try again.\");\n//           break;\n//         default:\n//           setMessage(\"Something went wrong.\");\n//           break;\n//       }\n//     });\n//   }, [stripe]);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (!stripe || !elements) {\n//       // Stripe.js hasn't yet loaded.\n//       // Make sure to disable form submission until Stripe.js has loaded.\n//       return;\n//     }\n\n//     setIsLoading(true);\n\n//     const { error } = await stripe.confirmPayment({\n//       elements,\n//       confirmParams: {\n//         // Make sure to change this to your payment completion page\n//         return_url: \"http://localhost:3000/\",\n//         receipt_email: email,\n//       },\n//     });\n\n//     // This point will only be reached if there is an immediate error when\n//     // confirming the payment. Otherwise, your customer will be redirected to\n//     // your `return_url`. For some payment methods like iDEAL, your customer will\n//     // be redirected to an intermediate site first to authorize the payment, then\n//     // redirected to the `return_url`.\n//     if (error.type === \"card_error\" || error.type === \"validation_error\") {\n//       setMessage(error.message);\n//     } else {\n//       setMessage(\"An unexpected error occurred.\");\n//     }\n\n//     setIsLoading(false);\n//   };\n\n//   const paymentElementOptions = {\n//     layout: \"tabs\"\n//   }\n\n//   return (\n//     <form id=\"payment-form\" onSubmit={handleSubmit}>\n//       <input\n//         id=\"email\"\n//         type=\"text\"\n//         value={email}\n//         onChange={(e) => setEmail(e.target.value)}\n//         placeholder=\"Enter email address\"\n//       />\n\n//         <AddressElement options={{\n//           mode: 'shipping',\n//           allowedCountries: ['BR'],\n//           fields: {\n//             phone: 'always',\n//           },\n//           validation: {\n//             phone: {\n//               required: 'never',\n//             },\n//           },\n\n//         }} />\n\n//       <PaymentElement id=\"payment-element\" options={paymentElementOptions} />\n//       <button disabled={isLoading || !stripe || !elements} id=\"submit\">\n//         <span id=\"button-text\">\n//           {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pay now\"}\n//         </span>\n//       </button>\n//       {/* Show any error or success messages */}\n//       {message && <div id=\"payment-message\">{message}</div>}\n//     </form>\n//   );\n// }\n\n\n\n\n\nimport React, { useEffect, useState } from \"react\";\nimport {\n  PaymentElement,\n  useStripe,\n  useElements,\n  AddressElement\n} from \"@stripe/react-stripe-js\";\n\nexport default function CheckoutForm() {\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const [email, setEmail] = useState('');\n  const [cpfCnpj, setCpfCnpj] = useState('');\n  const [message, setMessage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (!stripe) {\n      return;\n    }\n\n    const clientSecret = new URLSearchParams(window.location.search).get(\n      \"payment_intent_client_secret\"\n    );\n\n    if (!clientSecret) {\n      return;\n    }\n\n    stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\n      switch (paymentIntent.status) {\n        case \"succeeded\":\n          alert(\"Pagamento realizado com sucesso!\");\n          break;\n        case \"processing\":\n          setMessage(\"Seu pagamento está sendo processado\");\n          break;\n        case \"requires_payment_method\":\n          setMessage(\"Seu pagamento não foi bem-sucedido, tente novamente.\");\n          break;\n        default:\n          setMessage(\"Algo deu errado.\");\n          break;\n      }\n    });\n  }, [stripe]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      // Stripe.js hasn't yet loaded.\n      // Make sure to disable form submission until Stripe.js has loaded.\n      return;\n    }\n\n    setIsLoading(true);\n\n    const { error } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        // Make sure to change this to your payment completion page\n        return_url: \"http://localhost:3000/\",\n        receipt_email: email,\n      },\n      payment_method_data: {\n        billing_details: {\n          email: email,\n          phone: cpfCnpj,\n        },\n      },\n    });\n\n    // This point will only be reached if there is an immediate error when\n    // confirming the payment. Otherwise, your customer will be redirected to\n    // your `return_url`. For some payment methods like iDEAL, your customer will\n    // be redirected to an intermediate site first to authorize the payment, then\n    // redirected to the `return_url`.\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\n      setMessage(error.message);\n    } else {\n      setMessage(\"An unexpected error occurred.\");\n    }\n\n    setIsLoading(false);\n  };\n\n  const paymentElementOptions = {\n    layout: \"tabs\"\n  }\n\n  return (\n    <form id=\"payment-form\" onSubmit={handleSubmit}>\n      <input\n        id=\"email\"\n        type=\"text\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n        placeholder=\"Adicione seu e-mail\"\n      />\n      <input\n        id=\"cpfCnpj\"\n        type=\"text\"\n        value={cpfCnpj}\n        onChange={(e) => setCpfCnpj(e.target.value)}\n        placeholder=\"Enter CPF or CNPJ\"\n      />\n      \n      <AddressElement options={{\n        mode: 'shipping',\n        allowedCountries: ['BR'],\n        fields: {\n          phone: 'always',\n        },\n        validation: {\n          phone: {\n            required: 'never',\n          },\n        },\n      }} />\n\n      <PaymentElement id=\"payment-element\" options={paymentElementOptions} />\n      <button disabled={isLoading || !stripe || !elements} id=\"submit\">\n        <span id=\"button-text\">\n          {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pague agora\"}\n        </span>\n      </button>\n      {/* Show any error or success messages */}\n      {message && <div id=\"payment-message\">{message}</div>}\n    </form>\n  );\n}\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}