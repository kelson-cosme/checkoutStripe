{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\kelson.almeida\\\\Desktop\\\\bbbb\\\\src\\\\CheckoutForm.jsx\";\n// import React, { useEffect, useState } from \"react\";\n// import {\n//   PaymentElement,\n//   useStripe,\n//   useElements\n// } from \"@stripe/react-stripe-js\";\n\n// export default function CheckoutForm() {\n//   const stripe = useStripe();\n//   const elements = useElements();\n\n//   const [email, setEmail] = useState('');\n\n//   const [message, setMessage] = useState(null);\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   useEffect(() => {\n//     if (!stripe) {\n//       return;\n//     }\n\n//     const clientSecret = new URLSearchParams(window.location.search).get(\n//       \"payment_intent_client_secret\"\n//     );\n\n//     if (!clientSecret) {\n//       return;\n//     }\n\n//     stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\n//       switch (paymentIntent.status) {\n//         case \"succeeded\":\n//           setMessage(\"Payment succeeded!\");\n//           break;\n//         case \"processing\":\n//           setMessage(\"Your payment is processing.\");\n//           break;\n//         case \"requires_payment_method\":\n//           setMessage(\"Your payment was not successful, please try again.\");\n//           break;\n//         default:\n//           setMessage(\"Something went wrong.\");\n//           break;\n//       }\n//     });\n//   }, [stripe]);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (!stripe || !elements) {\n//       // Stripe.js hasn't yet loaded.\n//       // Make sure to disable form submission until Stripe.js has loaded.\n//       return;\n//     }\n\n//     setIsLoading(true);\n\n//     const { error } = await stripe.confirmPayment({\n//       elements,\n//       confirmParams: {\n//         // Make sure to change this to your payment completion page\n//         return_url: \"http://localhost:3000/\",\n//         receipt_email: email,\n//       },\n//     });\n\n//     // This point will only be reached if there is an immediate error when\n//     // confirming the payment. Otherwise, your customer will be redirected to\n//     // your `return_url`. For some payment methods like iDEAL, your customer will\n//     // be redirected to an intermediate site first to authorize the payment, then\n//     // redirected to the `return_url`.\n//     if (error.type === \"card_error\" || error.type === \"validation_error\") {\n//       setMessage(error.message);\n//     } else {\n//       setMessage(\"An unexpected error occurred.\");\n//     }\n\n//     setIsLoading(false);\n//   };\n\n//   const paymentElementOptions = {\n//     layout: \"tabs\"\n//   }\n\n//   return (\n//     <form id=\"payment-form\" onSubmit={handleSubmit}>\n//       <input\n//         id=\"email\"\n//         type=\"text\"\n//         value={email}\n//         onChange={(e) => setEmail(e.target.value)}\n//         placeholder=\"Enter email address\"\n//       />\n//       <input type=\"text\" />\n\n//       <PaymentElement id=\"payment-element\" options={paymentElementOptions} />\n//       <button disabled={isLoading || !stripe || !elements} id=\"submit\">\n//         <span id=\"button-text\">\n//           {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pay now\"}\n//         </span>\n//       </button>\n//       {/* Show any error or success messages */}\n//       {message && <div id=\"payment-message\">{message}</div>}\n//     </form>\n//   );\n// }\n\nimport React, { useEffect, useState } from \"react\";\nimport { PaymentElement, useStripe, useElements } from \"@stripe/react-stripe-js\";\nexport default function CheckoutForm() {\n  const stripe = useStripe();\n  const elements = useElements();\n  const [email, setEmail] = useState('');\n  const [address, setAddress] = useState({\n    line1: '',\n    line2: '',\n    city: '',\n    state: '',\n    postal_code: '',\n    country: ''\n  });\n  const [message, setMessage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n  useEffect(() => {\n    if (!stripe) {\n      return;\n    }\n    const clientSecret = new URLSearchParams(window.location.search).get(\"payment_intent_client_secret\");\n    if (!clientSecret) {\n      return;\n    }\n    stripe.retrievePaymentIntent(clientSecret).then(({\n      paymentIntent\n    }) => {\n      switch (paymentIntent.status) {\n        case \"succeeded\":\n          setMessage(\"Payment succeeded!\");\n          break;\n        case \"processing\":\n          setMessage(\"Your payment is processing.\");\n          break;\n        case \"requires_payment_method\":\n          setMessage(\"Your payment was not successful, please try again.\");\n          break;\n        default:\n          setMessage(\"Something went wrong.\");\n          break;\n      }\n    });\n  }, [stripe]);\n  const handleSubmit = async e => {\n    e.preventDefault();\n    if (!stripe || !elements) {\n      return;\n    }\n    setIsLoading(true);\n    const {\n      error\n    } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        return_url: \"http://localhost:3000/\",\n        receipt_email: email,\n        shipping: {\n          address\n        }\n      }\n    });\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\n      setMessage(error.message);\n    } else {\n      setMessage(\"An unexpected error occurred.\");\n    }\n    setIsLoading(false);\n  };\n  const paymentElementOptions = {\n    layout: \"tabs\"\n  };\n  return /*#__PURE__*/React.createElement(\"form\", {\n    id: \"payment-form\",\n    onSubmit: handleSubmit,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 204,\n      columnNumber: 5\n    }\n  }, /*#__PURE__*/React.createElement(\"input\", {\n    id: \"email\",\n    type: \"text\",\n    value: email,\n    onChange: e => setEmail(e.target.value),\n    placeholder: \"Enter email address\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 205,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"line1\",\n    type: \"text\",\n    value: address.line1,\n    onChange: e => setAddress({\n      ...address,\n      line1: e.target.value\n    }),\n    placeholder: \"Address Line 1\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 213,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"line2\",\n    type: \"text\",\n    value: address.line2,\n    onChange: e => setAddress({\n      ...address,\n      line2: e.target.value\n    }),\n    placeholder: \"Address Line 2\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 220,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"city\",\n    type: \"text\",\n    value: address.city,\n    onChange: e => setAddress({\n      ...address,\n      city: e.target.value\n    }),\n    placeholder: \"City\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 227,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"state\",\n    type: \"text\",\n    value: address.state,\n    onChange: e => setAddress({\n      ...address,\n      state: e.target.value\n    }),\n    placeholder: \"State\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 234,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"postal_code\",\n    type: \"text\",\n    value: address.postal_code,\n    onChange: e => setAddress({\n      ...address,\n      postal_code: e.target.value\n    }),\n    placeholder: \"Postal Code\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 241,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"input\", {\n    id: \"country\",\n    type: \"text\",\n    value: address.country,\n    onChange: e => setAddress({\n      ...address,\n      country: e.target.value\n    }),\n    placeholder: \"Country\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 248,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(PaymentElement, {\n    id: \"payment-element\",\n    options: paymentElementOptions,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 256,\n      columnNumber: 7\n    }\n  }), /*#__PURE__*/React.createElement(\"button\", {\n    disabled: isLoading || !stripe || !elements,\n    id: \"submit\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 257,\n      columnNumber: 7\n    }\n  }, /*#__PURE__*/React.createElement(\"span\", {\n    id: \"button-text\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 258,\n      columnNumber: 9\n    }\n  }, isLoading ? /*#__PURE__*/React.createElement(\"div\", {\n    className: \"spinner\",\n    id: \"spinner\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 259,\n      columnNumber: 24\n    }\n  }) : \"Pay now\")), message && /*#__PURE__*/React.createElement(\"div\", {\n    id: \"payment-message\",\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 262,\n      columnNumber: 19\n    }\n  }, message));\n}","map":{"version":3,"names":["React","useEffect","useState","PaymentElement","useStripe","useElements","CheckoutForm","stripe","elements","email","setEmail","address","setAddress","line1","line2","city","state","postal_code","country","message","setMessage","isLoading","setIsLoading","clientSecret","URLSearchParams","window","location","search","get","retrievePaymentIntent","then","paymentIntent","status","handleSubmit","e","preventDefault","error","confirmPayment","confirmParams","return_url","receipt_email","shipping","type","paymentElementOptions","layout","createElement","id","onSubmit","__self","__source","fileName","_jsxFileName","lineNumber","columnNumber","value","onChange","target","placeholder","options","disabled","className"],"sources":["C:/Users/kelson.almeida/Desktop/bbbb/src/CheckoutForm.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import {\n//   PaymentElement,\n//   useStripe,\n//   useElements\n// } from \"@stripe/react-stripe-js\";\n\n// export default function CheckoutForm() {\n//   const stripe = useStripe();\n//   const elements = useElements();\n\n//   const [email, setEmail] = useState('');\n\n//   const [message, setMessage] = useState(null);\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   useEffect(() => {\n//     if (!stripe) {\n//       return;\n//     }\n\n//     const clientSecret = new URLSearchParams(window.location.search).get(\n//       \"payment_intent_client_secret\"\n//     );\n\n//     if (!clientSecret) {\n//       return;\n//     }\n\n//     stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\n//       switch (paymentIntent.status) {\n//         case \"succeeded\":\n//           setMessage(\"Payment succeeded!\");\n//           break;\n//         case \"processing\":\n//           setMessage(\"Your payment is processing.\");\n//           break;\n//         case \"requires_payment_method\":\n//           setMessage(\"Your payment was not successful, please try again.\");\n//           break;\n//         default:\n//           setMessage(\"Something went wrong.\");\n//           break;\n//       }\n//     });\n//   }, [stripe]);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (!stripe || !elements) {\n//       // Stripe.js hasn't yet loaded.\n//       // Make sure to disable form submission until Stripe.js has loaded.\n//       return;\n//     }\n\n//     setIsLoading(true);\n\n//     const { error } = await stripe.confirmPayment({\n//       elements,\n//       confirmParams: {\n//         // Make sure to change this to your payment completion page\n//         return_url: \"http://localhost:3000/\",\n//         receipt_email: email,\n//       },\n//     });\n\n//     // This point will only be reached if there is an immediate error when\n//     // confirming the payment. Otherwise, your customer will be redirected to\n//     // your `return_url`. For some payment methods like iDEAL, your customer will\n//     // be redirected to an intermediate site first to authorize the payment, then\n//     // redirected to the `return_url`.\n//     if (error.type === \"card_error\" || error.type === \"validation_error\") {\n//       setMessage(error.message);\n//     } else {\n//       setMessage(\"An unexpected error occurred.\");\n//     }\n\n//     setIsLoading(false);\n//   };\n\n//   const paymentElementOptions = {\n//     layout: \"tabs\"\n//   }\n\n//   return (\n//     <form id=\"payment-form\" onSubmit={handleSubmit}>\n//       <input\n//         id=\"email\"\n//         type=\"text\"\n//         value={email}\n//         onChange={(e) => setEmail(e.target.value)}\n//         placeholder=\"Enter email address\"\n//       />\n//       <input type=\"text\" />\n\n//       <PaymentElement id=\"payment-element\" options={paymentElementOptions} />\n//       <button disabled={isLoading || !stripe || !elements} id=\"submit\">\n//         <span id=\"button-text\">\n//           {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pay now\"}\n//         </span>\n//       </button>\n//       {/* Show any error or success messages */}\n//       {message && <div id=\"payment-message\">{message}</div>}\n//     </form>\n//   );\n// }\n\n\n\n\n\n\n\nimport React, { useEffect, useState } from \"react\";\nimport {\n  PaymentElement,\n  useStripe,\n  useElements\n} from \"@stripe/react-stripe-js\";\n\nexport default function CheckoutForm() {\n  const stripe = useStripe();\n  const elements = useElements();\n\n  const [email, setEmail] = useState('');\n  const [address, setAddress] = useState({\n    line1: '',\n    line2: '',\n    city: '',\n    state: '',\n    postal_code: '',\n    country: ''\n  });\n\n  const [message, setMessage] = useState(null);\n  const [isLoading, setIsLoading] = useState(false);\n\n  useEffect(() => {\n    if (!stripe) {\n      return;\n    }\n\n    const clientSecret = new URLSearchParams(window.location.search).get(\n      \"payment_intent_client_secret\"\n    );\n\n    if (!clientSecret) {\n      return;\n    }\n\n    stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\n      switch (paymentIntent.status) {\n        case \"succeeded\":\n          setMessage(\"Payment succeeded!\");\n          break;\n        case \"processing\":\n          setMessage(\"Your payment is processing.\");\n          break;\n        case \"requires_payment_method\":\n          setMessage(\"Your payment was not successful, please try again.\");\n          break;\n        default:\n          setMessage(\"Something went wrong.\");\n          break;\n      }\n    });\n  }, [stripe]);\n\n  const handleSubmit = async (e) => {\n    e.preventDefault();\n\n    if (!stripe || !elements) {\n      return;\n    }\n\n    setIsLoading(true);\n\n    const { error } = await stripe.confirmPayment({\n      elements,\n      confirmParams: {\n        return_url: \"http://localhost:3000/\",\n        receipt_email: email,\n        shipping: {\n          address,\n        }\n      },\n    });\n\n    if (error.type === \"card_error\" || error.type === \"validation_error\") {\n      setMessage(error.message);\n    } else {\n      setMessage(\"An unexpected error occurred.\");\n    }\n\n    setIsLoading(false);\n  };\n\n  const paymentElementOptions = {\n    layout: \"tabs\"\n  }\n\n  return (\n    <form id=\"payment-form\" onSubmit={handleSubmit}>\n      <input\n        id=\"email\"\n        type=\"text\"\n        value={email}\n        onChange={(e) => setEmail(e.target.value)}\n        placeholder=\"Enter email address\"\n      />\n\n      <input\n        id=\"line1\"\n        type=\"text\"\n        value={address.line1}\n        onChange={(e) => setAddress({ ...address, line1: e.target.value })}\n        placeholder=\"Address Line 1\"\n      />\n      <input\n        id=\"line2\"\n        type=\"text\"\n        value={address.line2}\n        onChange={(e) => setAddress({ ...address, line2: e.target.value })}\n        placeholder=\"Address Line 2\"\n      />\n      <input\n        id=\"city\"\n        type=\"text\"\n        value={address.city}\n        onChange={(e) => setAddress({ ...address, city: e.target.value })}\n        placeholder=\"City\"\n      />\n      <input\n        id=\"state\"\n        type=\"text\"\n        value={address.state}\n        onChange={(e) => setAddress({ ...address, state: e.target.value })}\n        placeholder=\"State\"\n      />\n      <input\n        id=\"postal_code\"\n        type=\"text\"\n        value={address.postal_code}\n        onChange={(e) => setAddress({ ...address, postal_code: e.target.value })}\n        placeholder=\"Postal Code\"\n      />\n      <input\n        id=\"country\"\n        type=\"text\"\n        value={address.country}\n        onChange={(e) => setAddress({ ...address, country: e.target.value })}\n        placeholder=\"Country\"\n      />\n\n      <PaymentElement id=\"payment-element\" options={paymentElementOptions} />\n      <button disabled={isLoading || !stripe || !elements} id=\"submit\">\n        <span id=\"button-text\">\n          {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pay now\"}\n        </span>\n      </button>\n      {message && <div id=\"payment-message\">{message}</div>}\n    </form>\n  );\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module"}