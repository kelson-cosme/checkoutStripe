{"ast":null,"code":"// import React, { useEffect, useState } from \"react\";\n// import {\n//   PaymentElement,\n//   useStripe,\n//   useElements,\n//   AddressElement\n// } from \"@stripe/react-stripe-js\";\n\n// export default function CheckoutForm() {\n//   const stripe = useStripe();\n//   const elements = useElements();\n\n//   const [email, setEmail] = useState('');\n\n//   const [message, setMessage] = useState(null);\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   useEffect(() => {\n//     if (!stripe) {\n//       return;\n//     }\n\n//     const clientSecret = new URLSearchParams(window.location.search).get(\n//       \"payment_intent_client_secret\"\n//     );\n\n//     if (!clientSecret) {\n//       return;\n//     }\n\n//     stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\n//       switch (paymentIntent.status) {\n//         case \"succeeded\":\n//           setMessage(\"Payment succeeded!\");\n//           break;\n//         case \"processing\":\n//           setMessage(\"Your payment is processing.\");\n//           break;\n//         case \"requires_payment_method\":\n//           setMessage(\"Your payment was not successful, please try again.\");\n//           break;\n//         default:\n//           setMessage(\"Something went wrong.\");\n//           break;\n//       }\n//     });\n//   }, [stripe]);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (!stripe || !elements) {\n//       // Stripe.js hasn't yet loaded.\n//       // Make sure to disable form submission until Stripe.js has loaded.\n//       return;\n//     }\n\n//     setIsLoading(true);\n\n//     const { error } = await stripe.confirmPayment({\n//       elements,\n//       confirmParams: {\n//         // Make sure to change this to your payment completion page\n//         return_url: \"http://localhost:3000/\",\n//         receipt_email: email,\n//       },\n//     });\n\n//     // This point will only be reached if there is an immediate error when\n//     // confirming the payment. Otherwise, your customer will be redirected to\n//     // your `return_url`. For some payment methods like iDEAL, your customer will\n//     // be redirected to an intermediate site first to authorize the payment, then\n//     // redirected to the `return_url`.\n//     if (error.type === \"card_error\" || error.type === \"validation_error\") {\n//       setMessage(error.message);\n//     } else {\n//       setMessage(\"An unexpected error occurred.\");\n//     }\n\n//     setIsLoading(false);\n//   };\n\n//   const paymentElementOptions = {\n//     layout: \"tabs\"\n//   }\n\n//   return (\n//     <form id=\"payment-form\" onSubmit={handleSubmit}>\n//       <input\n//         id=\"email\"\n//         type=\"text\"\n//         value={email}\n//         onChange={(e) => setEmail(e.target.value)}\n//         placeholder=\"Enter email address\"\n//       />\n\n//         <AddressElement options={{\n//           mode: 'shipping',\n//           allowedCountries: ['BR'],\n//           fields: {\n//             phone: 'always',\n//           },\n//           validation: {\n//             phone: {\n//               required: 'never',\n//             },\n//           },\n\n//         }} />\n\n//       <PaymentElement id=\"payment-element\" options={paymentElementOptions} />\n//       <button disabled={isLoading || !stripe || !elements} id=\"submit\">\n//         <span id=\"button-text\">\n//           {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pay now\"}\n//         </span>\n//       </button>\n//       {/* Show any error or success messages */}\n//       {message && <div id=\"payment-message\">{message}</div>}\n//     </form>\n//   );\n// }\n\n// import React, { useEffect, useState } from \"react\";\n// import {\n//   PaymentElement,\n//   useStripe,\n//   useElements,\n//   AddressElement\n// } from \"@stripe/react-stripe-js\";\n\n// export default function CheckoutForm() {\n//   const stripe = useStripe();\n//   const elements = useElements();\n\n//   const [email, setEmail] = useState('');\n//   const [cpfCnpj, setCpfCnpj] = useState('');\n//   const [message, setMessage] = useState(null);\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   useEffect(() => {\n//     if (!stripe) {\n//       return;\n//     }\n\n//     const clientSecret = new URLSearchParams(window.location.search).get(\n//       \"payment_intent_client_secret\"\n//     );\n\n//     if (!clientSecret) {\n//       return;\n//     }\n\n//     stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\n//       switch (paymentIntent.status) {\n//         case \"succeeded\":\n//           alert(\"Pagamento realizado com sucesso!\");\n//           break;\n//         case \"processing\":\n//           setMessage(\"Seu pagamento está sendo processado\");\n//           break;\n//         case \"requires_payment_method\":\n//           setMessage(\"Seu pagamento não foi bem-sucedido, tente novamente.\");\n//           break;\n//         default:\n//           setMessage(\"Algo deu errado.\");\n//           break;\n//       }\n//     });\n//   }, [stripe]);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (!stripe || !elements) {\n//       // Stripe.js hasn't yet loaded.\n//       // Make sure to disable form submission until Stripe.js has loaded.\n//       return;\n//     }\n\n//     setIsLoading(true);\n\n//     const { error } = await stripe.confirmPayment({\n//       elements,\n//       confirmParams: {\n//         // Make sure to change this to your payment completion page\n//         return_url: \"http://localhost:3000/\",\n//         receipt_email: email,\n//       },\n//       payment_method_data: {\n//         billing_details: {\n//           email: email,\n//           phone: cpfCnpj,\n//         },\n//       },\n//     });\n\n//     // This point will only be reached if there is an immediate error when\n//     // confirming the payment. Otherwise, your customer will be redirected to\n//     // your `return_url`. For some payment methods like iDEAL, your customer will\n//     // be redirected to an intermediate site first to authorize the payment, then\n//     // redirected to the `return_url`.\n//     if (error.type === \"card_error\" || error.type === \"validation_error\") {\n//       setMessage(error.message);\n//     } else {\n//       setMessage(\"An unexpected error occurred.\");\n//     }\n\n//     setIsLoading(false);\n//   };\n\n//   const paymentElementOptions = {\n//     layout: \"tabs\"\n//   }\n\n//   return (\n//     <form id=\"payment-form\" onSubmit={handleSubmit}>\n//       <input\n//         id=\"email\"\n//         type=\"text\"\n//         value={email}\n//         onChange={(e) => setEmail(e.target.value)}\n//         placeholder=\"Adicione seu e-mail\"\n//       />\n//       <input\n//         id=\"cpfCnpj\"\n//         type=\"text\"\n//         value={cpfCnpj}\n//         onChange={(e) => setCpfCnpj(e.target.value)}\n//         placeholder=\"Enter CPF or CNPJ\"\n//       />\n\n//       <AddressElement options={{\n//         mode: 'shipping',\n//         allowedCountries: ['BR'],\n//         fields: {\n//           phone: 'always',\n//         },\n//         validation: {\n//           phone: {\n//             required: 'never',\n//           },\n//         },\n//       }} />\n\n//       <PaymentElement id=\"payment-element\" options={paymentElementOptions} />\n//       <button disabled={isLoading || !stripe || !elements} id=\"submit\">\n//         <span id=\"button-text\">\n//           {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pague agora\"}\n//         </span>\n//       </button>\n//       {/* Show any error or success messages */}\n//       {message && <div id=\"payment-message\">{message}</div>}\n//     </form>\n//   );\n// }","map":{"version":3,"names":[],"sources":["C:/Users/kelson.almeida/Desktop/bbbb/src/CheckoutForm.jsx"],"sourcesContent":["// import React, { useEffect, useState } from \"react\";\n// import {\n//   PaymentElement,\n//   useStripe,\n//   useElements,\n//   AddressElement\n// } from \"@stripe/react-stripe-js\";\n\n// export default function CheckoutForm() {\n//   const stripe = useStripe();\n//   const elements = useElements();\n\n//   const [email, setEmail] = useState('');\n\n//   const [message, setMessage] = useState(null);\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   useEffect(() => {\n//     if (!stripe) {\n//       return;\n//     }\n\n//     const clientSecret = new URLSearchParams(window.location.search).get(\n//       \"payment_intent_client_secret\"\n//     );\n\n//     if (!clientSecret) {\n//       return;\n//     }\n\n//     stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\n//       switch (paymentIntent.status) {\n//         case \"succeeded\":\n//           setMessage(\"Payment succeeded!\");\n//           break;\n//         case \"processing\":\n//           setMessage(\"Your payment is processing.\");\n//           break;\n//         case \"requires_payment_method\":\n//           setMessage(\"Your payment was not successful, please try again.\");\n//           break;\n//         default:\n//           setMessage(\"Something went wrong.\");\n//           break;\n//       }\n//     });\n//   }, [stripe]);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (!stripe || !elements) {\n//       // Stripe.js hasn't yet loaded.\n//       // Make sure to disable form submission until Stripe.js has loaded.\n//       return;\n//     }\n\n//     setIsLoading(true);\n\n//     const { error } = await stripe.confirmPayment({\n//       elements,\n//       confirmParams: {\n//         // Make sure to change this to your payment completion page\n//         return_url: \"http://localhost:3000/\",\n//         receipt_email: email,\n//       },\n//     });\n\n//     // This point will only be reached if there is an immediate error when\n//     // confirming the payment. Otherwise, your customer will be redirected to\n//     // your `return_url`. For some payment methods like iDEAL, your customer will\n//     // be redirected to an intermediate site first to authorize the payment, then\n//     // redirected to the `return_url`.\n//     if (error.type === \"card_error\" || error.type === \"validation_error\") {\n//       setMessage(error.message);\n//     } else {\n//       setMessage(\"An unexpected error occurred.\");\n//     }\n\n//     setIsLoading(false);\n//   };\n\n//   const paymentElementOptions = {\n//     layout: \"tabs\"\n//   }\n\n//   return (\n//     <form id=\"payment-form\" onSubmit={handleSubmit}>\n//       <input\n//         id=\"email\"\n//         type=\"text\"\n//         value={email}\n//         onChange={(e) => setEmail(e.target.value)}\n//         placeholder=\"Enter email address\"\n//       />\n\n//         <AddressElement options={{\n//           mode: 'shipping',\n//           allowedCountries: ['BR'],\n//           fields: {\n//             phone: 'always',\n//           },\n//           validation: {\n//             phone: {\n//               required: 'never',\n//             },\n//           },\n\n//         }} />\n\n//       <PaymentElement id=\"payment-element\" options={paymentElementOptions} />\n//       <button disabled={isLoading || !stripe || !elements} id=\"submit\">\n//         <span id=\"button-text\">\n//           {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pay now\"}\n//         </span>\n//       </button>\n//       {/* Show any error or success messages */}\n//       {message && <div id=\"payment-message\">{message}</div>}\n//     </form>\n//   );\n// }\n\n\n\n\n\n// import React, { useEffect, useState } from \"react\";\n// import {\n//   PaymentElement,\n//   useStripe,\n//   useElements,\n//   AddressElement\n// } from \"@stripe/react-stripe-js\";\n\n// export default function CheckoutForm() {\n//   const stripe = useStripe();\n//   const elements = useElements();\n\n//   const [email, setEmail] = useState('');\n//   const [cpfCnpj, setCpfCnpj] = useState('');\n//   const [message, setMessage] = useState(null);\n//   const [isLoading, setIsLoading] = useState(false);\n\n//   useEffect(() => {\n//     if (!stripe) {\n//       return;\n//     }\n\n//     const clientSecret = new URLSearchParams(window.location.search).get(\n//       \"payment_intent_client_secret\"\n//     );\n\n//     if (!clientSecret) {\n//       return;\n//     }\n\n//     stripe.retrievePaymentIntent(clientSecret).then(({ paymentIntent }) => {\n//       switch (paymentIntent.status) {\n//         case \"succeeded\":\n//           alert(\"Pagamento realizado com sucesso!\");\n//           break;\n//         case \"processing\":\n//           setMessage(\"Seu pagamento está sendo processado\");\n//           break;\n//         case \"requires_payment_method\":\n//           setMessage(\"Seu pagamento não foi bem-sucedido, tente novamente.\");\n//           break;\n//         default:\n//           setMessage(\"Algo deu errado.\");\n//           break;\n//       }\n//     });\n//   }, [stripe]);\n\n//   const handleSubmit = async (e) => {\n//     e.preventDefault();\n\n//     if (!stripe || !elements) {\n//       // Stripe.js hasn't yet loaded.\n//       // Make sure to disable form submission until Stripe.js has loaded.\n//       return;\n//     }\n\n//     setIsLoading(true);\n\n//     const { error } = await stripe.confirmPayment({\n//       elements,\n//       confirmParams: {\n//         // Make sure to change this to your payment completion page\n//         return_url: \"http://localhost:3000/\",\n//         receipt_email: email,\n//       },\n//       payment_method_data: {\n//         billing_details: {\n//           email: email,\n//           phone: cpfCnpj,\n//         },\n//       },\n//     });\n\n//     // This point will only be reached if there is an immediate error when\n//     // confirming the payment. Otherwise, your customer will be redirected to\n//     // your `return_url`. For some payment methods like iDEAL, your customer will\n//     // be redirected to an intermediate site first to authorize the payment, then\n//     // redirected to the `return_url`.\n//     if (error.type === \"card_error\" || error.type === \"validation_error\") {\n//       setMessage(error.message);\n//     } else {\n//       setMessage(\"An unexpected error occurred.\");\n//     }\n\n//     setIsLoading(false);\n//   };\n\n//   const paymentElementOptions = {\n//     layout: \"tabs\"\n//   }\n\n//   return (\n//     <form id=\"payment-form\" onSubmit={handleSubmit}>\n//       <input\n//         id=\"email\"\n//         type=\"text\"\n//         value={email}\n//         onChange={(e) => setEmail(e.target.value)}\n//         placeholder=\"Adicione seu e-mail\"\n//       />\n//       <input\n//         id=\"cpfCnpj\"\n//         type=\"text\"\n//         value={cpfCnpj}\n//         onChange={(e) => setCpfCnpj(e.target.value)}\n//         placeholder=\"Enter CPF or CNPJ\"\n//       />\n      \n//       <AddressElement options={{\n//         mode: 'shipping',\n//         allowedCountries: ['BR'],\n//         fields: {\n//           phone: 'always',\n//         },\n//         validation: {\n//           phone: {\n//             required: 'never',\n//           },\n//         },\n//       }} />\n\n//       <PaymentElement id=\"payment-element\" options={paymentElementOptions} />\n//       <button disabled={isLoading || !stripe || !elements} id=\"submit\">\n//         <span id=\"button-text\">\n//           {isLoading ? <div className=\"spinner\" id=\"spinner\"></div> : \"Pague agora\"}\n//         </span>\n//       </button>\n//       {/* Show any error or success messages */}\n//       {message && <div id=\"payment-message\">{message}</div>}\n//     </form>\n//   );\n// }\n"],"mappings":"AAAA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","ignoreList":[]},"metadata":{},"sourceType":"module"}